{"version":3,"file":"form-dynamic-angular.mjs","sources":["../../../projects/form-dynamic-angular/src/lib/form-dynamic-angular.service.ts","../../../projects/form-dynamic-angular/src/lib/form-dynamic-angular.component.ts","../../../projects/form-dynamic-angular/src/lib/form-dynamic-angular.component.html","../../../projects/form-dynamic-angular/src/lib/form-dynamic-angular.module.ts","../../../projects/form-dynamic-angular/src/public-api.ts","../../../projects/form-dynamic-angular/src/form-dynamic-angular.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormDynamicAngularService {\r\n\r\n  constructor() { }\r\n}\r\n","import { UntypedFormGroup } from '@angular/forms';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nimport * as moment from 'moment';\r\nimport { MessageService } from 'primeng/api';\r\n\r\nexport interface ITreeSelectOptions {\r\n  key: string,\r\n  label: string,\r\n  icon: string,\r\n  children?: ITreeSelectOptions[]\r\n}\r\n\r\n\r\nexport interface IOptions {\r\n  description: string,\r\n  code: number | string\r\n}\r\n\r\nexport interface ICols {\r\n  field: string,\r\n  header: string\r\n}\r\n\r\nexport interface IForm {\r\n  label?: string,\r\n  secondLabel?: string,\r\n  type?: \"autocomplete\" | \"button\" | \"check-box\" | \"currency\" | \"date\" | \"date-time\" | \"switch\" | \"list\" | \"mask\" | \"number\" | \"radio-button\" | \"select\" | \"select-button\" | \"table\" | \"text\" | \"text-area\" | \"tree-select\" | \"multi\" | \"upload-files\" | \"password\",\r\n  disabled?: boolean | null,\r\n  colsTable?: ICols[],\r\n  options?: IOptions[]\r\n  datePeriod?: boolean\r\n  formControl?: string,\r\n  clean?: Function,\r\n  formControlSecondary?: string,\r\n  treeSelectOptions?: ITreeSelectOptions[],\r\n  forceSelection?: boolean,\r\n  onCLick?: Function,\r\n  onChange?: Function,\r\n  class?: string,\r\n  rowsTable?: any[],\r\n  minDate?: Date,\r\n  maxDate?: Date,\r\n  col?: string,\r\n  acceptFiles?: string,\r\n  msgAcceptFiles?: string,\r\n  required?: boolean,\r\n  icon?: string,\r\n  placeholder?: string,\r\n  textButton?: string,\r\n  textCheckBox?: string,\r\n  mask?: string\r\n}\r\n\r\n\r\nexport interface IButtonsStandard {\r\n  type: 'clean' | 'filter' | 'save' | 'cancel',\r\n  onCLick: Function,\r\n  styleClass?: string\r\n}\r\n\r\nexport interface IButtonsOptional {\r\n  label: string,\r\n  onCLick: Function,\r\n  icon: string,\r\n  styleClass: string\r\n}\r\n\r\n@Component({\r\n  selector: 'form-dynamic-angular',\r\n  templateUrl: 'form-dynamic-angular.component.html',\r\n  styleUrls: ['form-dynamic-angular.component.css']\r\n})\r\n\r\n\r\nexport class FormDynamicAngularComponent {\r\n  @Input() title!: string;\r\n  @Input() sigle!: string;\r\n  @Input() description!: string;\r\n  @Input() validateForm: boolean = false;\r\n\r\n  @Input() form: IForm[] = []\r\n  @Input() control: UntypedFormGroup;\r\n\r\n  @Input() buttonsStandard: IButtonsStandard[]\r\n  @Input() buttonsOptional: IButtonsOptional[]\r\n\r\n  @Input() files: File[] = [];\r\n\r\n  filesDonwload: File[] = [];\r\n\r\n  filteredAutoComplete: any[] = [];\r\n  maxDate: Date\r\n  minDate: Date\r\n  minDateAll: Date;\r\n\r\n  constructor(\r\n    public translate: TranslateService,\r\n    private messageService: MessageService\r\n  ) {\r\n\r\n  }\r\n\r\n  dowloadFIle(event: any, file: any) {\r\n    event.stopPropagation()\r\n\r\n    // this.attachmentsService.download(file.id).subscribe(data => {\r\n    //   const blob = window.URL.createObjectURL(new Blob([data]));\r\n    //   const anchorEl = document.createElement(\"a\");\r\n    //   anchorEl.href = blob;\r\n    //   anchorEl.setAttribute(\"download\", file.name);\r\n    //   anchorEl.click();\r\n    // })\r\n  }\r\n\r\n  onFocusDate(date: Date) {\r\n    this.minDate = moment(date).toDate()\r\n    this.maxDate = moment(date).add(6, 'month').toDate();\r\n  }\r\n\r\n  async onSelect(fileName: string, event: { addedFiles: any; }) {\r\n    this.filesDonwload.push(...event.addedFiles);\r\n    const newFIles = event.addedFiles\r\n    let arr = [];\r\n    for (const item of newFIles) {\r\n      let aux = {\r\n        name: item.name,\r\n        contentType: item?.type,\r\n        content: await this.toBase64(item)\r\n      };\r\n      arr.push(aux);\r\n    }\r\n\r\n    this.control.get(fileName)?.setValue(arr);\r\n  }\r\n\r\n  onRemove(event: File) {\r\n    this.filesDonwload.splice(this.filesDonwload.indexOf(event), 1);\r\n  }\r\n\r\n  filterAutoComplete(event: { query: any; }, suggestionsAutoComplete: any) {\r\n    let filtered: any[] = [];\r\n    let query = event.query;\r\n\r\n    if (suggestionsAutoComplete) {\r\n      for (let i = 0; i < suggestionsAutoComplete.length; i++) {\r\n        let dados = suggestionsAutoComplete[i];\r\n        if (dados.description.toLowerCase().normalize('NFD').replace(/\\p{M}/ug, '').indexOf(query.toLowerCase().normalize('NFD').replace(/\\p{M}/ug, '')) != -1) {\r\n          filtered.push(dados);\r\n        }\r\n      }\r\n\r\n      this.filteredAutoComplete = filtered;\r\n    }\r\n  }\r\n\r\n  toBase64 = async (file: File) => {\r\n    return new Promise((resolve, _) => {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => resolve(reader.result);\r\n      reader.readAsDataURL(file);\r\n    });\r\n  }\r\n\r\n  onBlurDate(event: any) {\r\n    if (event.target.value) {\r\n      if (!moment(event.target.value, \"DD/MM/yyyy HH:mm\", true).isValid() && !moment(event.target.value, \"DD/MM/yyyy\", true).isValid()) {\r\n        this.messageService.add({ severity: 'error', summary: this.translate.instant('globals.invalidDate'), detail: this.translate.instant('globals.invalidDateMessage') })\r\n      }\r\n    }\r\n  }\r\n\r\n  onChange(change?: Function) {\r\n    if (change) {\r\n      change()\r\n    }\r\n  }\r\n}\r\n","<div>\r\n    <div *ngIf=\"title\" class=\"div-title\">\r\n        <span translate={{title}}></span>\r\n        <div *ngIf=\"sigle && description\" class=\"d-flex subtitle\">\r\n            <span translate={{sigle}}></span> <span>-</span><span translate={{description}}></span>\r\n        </div>\r\n        <p-divider></p-divider>\r\n    </div>\r\n    <form *ngIf=\"control\" [formGroup]=\"control\" class=\"row row-custom\">\r\n        <div *ngFor=\"let campo of form\" class=\"{{campo.col}} col-sm-12\">\r\n            <label class=\"form-label\" *ngIf=\"campo.label\">{{campo.label}}</label>\r\n            <label class=\"form-label ml-2\" *ngIf=\"campo.secondLabel\">{{campo.secondLabel}}</label>\r\n            <label *ngIf=\"campo.required && campo.label\" class=\"danger-text ml-2\">*</label>\r\n\r\n            <div class=\"mb-3 \">\r\n                <!-- text -->\r\n                <input [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" pInputText placeholder={{campo.placeholder}}\r\n                    *ngIf=\"campo.type == 'text' || campo.type == 'number' \" type={{campo.type}} class=\"form-control\"\r\n                    formControlName={{campo.formControl}} />\r\n\r\n                <!-- select -->\r\n                <p-dropdown [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} styleClass=\"w-100 form-control p-0\"\r\n                    (onChange)=\"onChange(campo.onChange)\" *ngIf=\"campo.type === 'select'\" [options]=\"campo.options\"\r\n                    formControlName={{campo.formControl}} optionLabel=\"description\"></p-dropdown>\r\n\r\n                <!-- currency  -->\r\n                <p-inputNumber *ngIf=\"campo.type === 'currency'\" [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" formControlName={{campo.formControl}} placeholder={{campo.placeholder}}\r\n                    inputStyleClass=\" form-control w-100\" styleClass=\"w-100\" (onKeyDown)=\"onChange(campo.onChange)\"\r\n                    mode=\"currency\" [min]=\"0\" currency=\"BRL\">\r\n                </p-inputNumber>\r\n\r\n                <!-- mask  -->\r\n                <p-inputMask *ngIf=\"campo.type === 'mask'\" [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" formControlName={{campo.formControl}} placeholder={{campo.placeholder}} styleClass=\" form-control\"\r\n                    (onComplete)=\"onChange(campo.onChange)\" mask={{campo.mask}} unmask=\"true\"></p-inputMask>\r\n\r\n                <!-- treeSelect -->\r\n                <p-treeSelect [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} (onNodeSelect)=\"onChange(campo.onChange)\"\r\n                    *ngIf=\"campo.type === 'tree-select'\" containerStyleClass=\"w-100 form-control p-0\"\r\n                    formControlName={{campo.formControl}} [options]=\"campo.treeSelectOptions\" [filter]=\"true\"\r\n                    [filterInputAutoFocus]=\"true\" emptyMessage=\"Nenhum dado encontrado\" [showClear]=\"true\"\r\n                    (onClear)=\"campo.clean()\"></p-treeSelect>\r\n\r\n                <!-- autoComplete -->\r\n                <p-autoComplete [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} styleClass=\"w-100 p-0\" inputStyleClass=\"form-control\"\r\n                    [inputStyle]=\"{'width':'100%'}\" (onSelect)=\" onChange(campo.onChange)\"\r\n                    *ngIf=\"campo.type === 'autocomplete'\" formControlName={{campo.formControl}}\r\n                    [suggestions]=\"filteredAutoComplete\" (completeMethod)=\"filterAutoComplete($event, campo.options)\"\r\n                    [forceSelection]=\"false\" [showEmptyMessage]=\"true\" emptyMessage=\"Nenhum dado encontrado\"\r\n                    dataKey=\"code\" field=\"description\"></p-autoComplete>\r\n\r\n                <!-- date -->\r\n                <div class=\"d-flex-custom\" *ngIf=\"campo.type === 'date' && campo.datePeriod\">\r\n                    <p-calendar [ngClass]=\"{\r\n                        'ng-invalid ng-dirty':\r\n                        validateForm && control.controls[campo.formControl].errors\r\n                      }\" [selectOtherMonths]=\"true\" [minDate]=\"minDateAll\" styleClass=\"w-100 form-control p-0\"\r\n                        (onSelect)=\"onChange(campo.onChange)\" dateFormat=\"dd/mm/yy\" placeholder=\"dd/mm/aaaa\"\r\n                        [showIcon]=\"true\" formControlName={{campo.formControl}}\r\n                        (onBlur)=\"onBlurDate($event)\"></p-calendar>\r\n                    <!-- <span class=\"calendarPeriod\">{{translate.instant('globals.between_dates')}}</span> -->\r\n                    <span class=\"calendarPeriod\">a</span>\r\n                    <p-calendar [ngClass]=\"{\r\n                        'ng-invalid ng-dirty':\r\n                        validateForm && control.controls[campo.formControl].errors\r\n                      }\" [selectOtherMonths]=\"true\" styleClass=\"w-100 form-control p-0\"\r\n                        (onFocus)=\"onFocusDate(control.value['períodoIni'])\" (onSelect)=\"onChange(campo.onChange)\"\r\n                        [minDate]=\"minDate\" [maxDate]=\"maxDate\" dateFormat=\"dd/mm/yy\" placeholder=\"dd/mm/aaaa\"\r\n                        [showIcon]=\"true\" formControlName={{campo.formControlSecondary}}\r\n                        (onBlur)=\"onBlurDate($event)\"></p-calendar>\r\n                </div>\r\n                <div *ngIf=\"campo.type === 'date' && !campo.datePeriod\">\r\n                    <p-calendar [ngClass]=\"{\r\n                        'ng-invalid ng-dirty':\r\n                        validateForm && control.controls[campo.formControl].errors\r\n                      }\" (onSelect)=\"onChange(campo.onChange)\" [iconDisplay]=\"'input'\" [selectOtherMonths]=\"true\"\r\n                        [minDate]=\"minDateAll\" styleClass=\"w-100 p-0\" inputStyleClass=\"form-control\"\r\n                        dateFormat=\"dd/mm/yy\" placeholder=\"dd/mm/aaaa\" formControlName={{campo.formControl}}\r\n                        [showIcon]=\"true\" (onBlur)=\"onBlurDate($event)\"></p-calendar>\r\n                </div>\r\n\r\n                <!-- date-time -->\r\n                <div *ngIf=\"campo.type === 'date-time'\">\r\n                    <p-calendar [ngClass]=\"{\r\n                        'ng-invalid ng-dirty':\r\n                        validateForm && control.controls[campo.formControl].errors\r\n                      }\" (onSelect)=\"onChange(campo.onChange)\" [selectOtherMonths]=\"true\"\r\n                        [(minDate)]=\"campo.minDate ?? minDateAll\" [(maxDate)]=\"campo.maxDate\"\r\n                        styleClass=\"w-100 form-control p-0\" dateFormat=\"dd/mm/yy\" placeholder=\"dd/mm/aaaa hh:mm\"\r\n                        formControlName={{campo.formControl}} [showIcon]=\"true\" [showTime]=\"true\"\r\n                        (onBlur)=\"onBlurDate($event)\"></p-calendar>\r\n                </div>\r\n\r\n                <!-- textarea -->\r\n                <textarea [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} pInputTextarea (attr.change)=\"onChange(campo.onChange)\"\r\n                    *ngIf=\"campo.type === 'text-area' \" pInputTextarea formControlName={{campo.formControl}}\r\n                    class=\"form-control\" rows={{campo.rows}}></textarea>\r\n\r\n                <!-- checkbox -->\r\n                <div *ngIf=\"campo.type == 'check-box'\">\r\n                    <p-checkbox [ngClass]=\"{\r\n                        'ng-invalid ng-dirty':\r\n                        validateForm && control.controls[campo.formControl].errors\r\n                      }\" (onChange)=\"onChange(campo.onChange)\" binary=\"true\" formControlName={{campo.formControl}}\r\n                        value={{campo.formControl}} label={{campo.textCheckBox}}></p-checkbox>\r\n                </div>\r\n\r\n                <!-- button -->\r\n                <button pButton *ngIf=\"campo.type == 'button'\" class='{{campo.class}} w-100 mt-3'\r\n                    (click)=\"campo.onCLick()\" icon={{campo.icon}}\r\n                    [label]=\"translate.instant(campo.textButton)\"></button>\r\n\r\n                <!-- upload files -->\r\n                <div *ngIf=\"campo.type === 'upload-files' && !campo.disabled \" ngx-dropzone class=\"drag-image\"\r\n                    [accept]=\"campo.acceptFiles\" (change)=\"onSelect(campo.formControl, $event)\">\r\n                    <ngx-dropzone-label>\r\n                        <div><i class=\"pi pi-cloud-upload\"></i></div>\r\n                        <h6>Clique ou arraste e solte um arquivo para anexar</h6>\r\n                        <span>{{campo.msgAcceptFiles}}</span>\r\n                    </ngx-dropzone-label>\r\n                    <div *ngFor=\"let f of filesDonwload\">\r\n                        <ngx-dropzone-image-preview *ngIf=\"f.type && f.type.includes('image')\" [file]=\"f\"\r\n                            [removable]=\"true\" (removed)=\"onRemove(f)\">\r\n                            <ngx-dropzone-label>{{ f.name }}</ngx-dropzone-label>\r\n                        </ngx-dropzone-image-preview>\r\n                        <ngx-dropzone-preview *ngIf=\"f.type && !f.type.includes('image')\" [file]=\"f\" [removable]=\"true\"\r\n                            (removed)=\"onRemove(f)\">\r\n                            <ngx-dropzone-label>{{ f.name }}</ngx-dropzone-label>\r\n                        </ngx-dropzone-preview>\r\n                        <ngx-dropzone-preview *ngIf=\" f.id\" [file]=\"f\" [removable]=\"true\" (removed)=\"onRemove(f)\">\r\n                            <ngx-dropzone-label>{{ f.name }}</ngx-dropzone-label>\r\n                        </ngx-dropzone-preview>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- upload files disabled -->\r\n                <div *ngIf=\"campo.type === 'upload-files' && campo.disabled \">\r\n                    <p-button (click)=\"op.toggle($event)\" icon=\"pi pi-paperclip\"\r\n                        [label]=\"translate.instant('globals.files')\"></p-button>\r\n\r\n                    <p-overlayPanel #op [style]=\"{'width': '450px'}\" [showCloseIcon]=\"true\">\r\n                        <ng-template pTemplate=\"content\">\r\n                            <p-table *ngIf=\"files.length > 0\" [value]=\"files\" selectionMode=\"single\"\r\n                                [(selection)]=\"selectedProduct\" (onRowSelect)=\"onRowSelect($event, op)\"\r\n                                responsiveLayout=\"scroll\">\r\n                                <ng-template pTemplate=\"header\">\r\n                                    <tr>\r\n                                        <th pSortableColumn=\"name\">{{translate.instant('globals.name')}}<p-sortIcon\r\n                                                field=\"name\"></p-sortIcon></th>\r\n                                    </tr>\r\n                                </ng-template>\r\n                                <ng-template pTemplate=\"body\" let-rowData let-file>\r\n                                    <tr [pSelectableRow]=\"rowData\">\r\n                                        <td>{{file.name}}</td>\r\n                                        <td> <p-button icon=\"pi pi-download\"\r\n                                                (click)='dowloadFIle($event,file)'></p-button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </ng-template>\r\n                            </p-table>\r\n                            <div *ngIf=\"files.length === 0\" class=\"p-10\">\r\n                                <label>{{translate.instant('globals.notFiles')}}</label>\r\n                            </div>\r\n                        </ng-template>\r\n                    </p-overlayPanel>\r\n                </div>\r\n\r\n                <!-- list -->\r\n                <ul *ngIf=\"campo.type === 'list' && campo.options\">\r\n                    <li *ngFor=\"let list of campo.options\">{{list.description}}</li>\r\n                </ul>\r\n\r\n                <!-- multi -->\r\n                <p-multiSelect [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} *ngIf=\"campo.type === 'multi'\" [options]=\"campo.options\"\r\n                    formControlName={{campo.formControl}} styleClass=\"form-control p-0\"\r\n                    optionLabel=\"description\"></p-multiSelect>\r\n\r\n                <!-- radioButton -->\r\n                <div *ngIf=\"campo.type === 'radio-button'\" class=\"d-flex-radio-button form-control border-none\">\r\n                    <div *ngFor=\"let listRadioButton of campo.options\" class=\"field-checkbox\">\r\n                        <p-radioButton [ngClass]=\"{\r\n                            'ng-invalid ng-dirty':\r\n                            validateForm && control.controls[campo.formControl].errors\r\n                          }\" [value]=\"listRadioButton.code\" formControlName={{campo.formControl}}\r\n                            class=\"margin-right-10\" (onClick)=\"onChange(campo.onChange)\"></p-radioButton>\r\n                        <label class=\"margin-right-1\">{{listRadioButton.description}}</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- selectButton -->\r\n                <div class=\"d-flex\" *ngIf=\"campo.type === 'select-button'\">\r\n                    <p-selectButton (onChange)=\"onChange(campo.onChange)\" [options]=\"campo.options\"\r\n                        formControlName={{campo.formControl}} optionValue=\"code\">\r\n                        <ng-template let-item>\r\n                            <span>{{item.description}}</span>\r\n                        </ng-template>\r\n                    </p-selectButton>\r\n                    <!-- <input type=\"text\" pInputText class=\"form-control\" [attr.disabled]=\"campo.disabled\"\r\n                        formControlName={{campo.formControlSecondary}}> -->\r\n                </div>\r\n\r\n                <!-- table -->\r\n                <p-table *ngIf=\"campo.type === 'table'\" [columns]=campo.colsTable styleClass=p-datatable-striped\r\n                    [value]=campo.rowsTable>\r\n                    <ng-template pTemplate=\"header\" let-columns>\r\n                        <tr>\r\n                            <th *ngFor=\"let col of columns\">\r\n                                {{ col.header }}\r\n                            </th>\r\n                        </tr>\r\n                    </ng-template>\r\n                    <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\r\n                        <tr>\r\n                            <td *ngFor=\"let col of columns\">\r\n                                <div *ngIf=\"col.field !== 'button'\">\r\n                                    {{ rowData[col.field] }}\r\n                                </div>\r\n                                <div *ngIf=\"col.field == 'button'\">\r\n                                    <p-button styleClass={{rowData[col.field].styleClass}}\r\n                                        label={{rowData[col.field].label}} (click)=\"rowData[col.field].onCLick(rowData)\"\r\n                                        icon={{rowData[col.field].icon}}></p-button>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    </ng-template>\r\n                </p-table>\r\n\r\n                <!-- inputSwitch -->\r\n                <div class=\"d-flex\" *ngIf=\"campo.type === 'switch'\">\r\n                    <p-inputSwitch formControlName={{campo.formControl}} class=\"mr-10\"\r\n                        (onChange)=\"onChange(campo.onChange)\"></p-inputSwitch>\r\n                    <p translate={{campo.label}}></p>\r\n                </div>\r\n\r\n                <!-- password -->\r\n                <p-password [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} *ngIf=\"campo.type === 'password'\" [feedback]=\"false\"\r\n                    formControlName={{campo.formControl}} (onChange)=\"onChange(campo.onChange)\" styleClass=\"w-100\"\r\n                    inputStyleClass=\"form-control\" [toggleMask]=\"true\"></p-password>\r\n\r\n                <!-- validação de campo -->\r\n                <div class=\"h-10\">\r\n                    <small class=\"danger-text\"\r\n                        *ngIf=\"validateForm && control.controls[campo.formControl] && control.controls[campo.formControl].errors?.['required']\">\r\n                        Campo obrigatório\r\n                    </small>\r\n                    <small class=\"danger-text\"\r\n                        *ngIf=\"validateForm && control.controls[campo.formControl] && control.controls[campo.formControl].errors?.['email']\">\r\n                        Email inválido\r\n                    </small>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <p-divider\r\n            *ngIf=\"(buttonsStandard && buttonsStandard.length > 0) || (buttonsOptional && buttonsOptional.length > 0)\"></p-divider>\r\n\r\n        <div class=\"buttons-form\">\r\n            <div *ngFor=\"let button of buttonsStandard\">\r\n                <p-button *ngIf=\"button.type === 'clean'\" styleClass=\"p-button-warning {{button.styleClass}}\"\r\n                    label=\"Limpar\" (click)=\"button.onCLick()\" icon=\"pi pi-times\"></p-button>\r\n                <p-button *ngIf=\"button.type === 'filter'\" styleClass=\"{{button.styleClass}}\" label=\"Filtrar\"\r\n                    (click)=\"button.onCLick()\" icon=\"pi pi-search\"></p-button>\r\n                <p-button *ngIf=\"button.type === 'save'\" styleClass=\"p-button-success {{button.styleClass}}\"\r\n                    label=\"Salvar\" (click)=\"button.onCLick()\" icon=\"pi pi-save\"></p-button>\r\n                <p-button *ngIf=\"button.type === 'cancel'\" styleClass=\"p-button-danger {{button.styleClass}}\"\r\n                    label=\"Cancelar\" (click)=\"button.onCLick()\" icon=\"pi pi-times\"></p-button>\r\n            </div>\r\n            <div *ngFor=\"let button of buttonsOptional\">\r\n                <p-button styleClass={{button.styleClass}} label={{button.label}} (click)=\" button.onCLick()\"\r\n                    icon={{button.icon}}></p-button>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser'\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { DividerModule } from 'primeng/divider';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { CalendarModule } from 'primeng/calendar';\r\nimport { TreeSelectModule } from 'primeng/treeselect';\r\nimport { RadioButtonModule } from 'primeng/radiobutton';\r\nimport { AutoCompleteModule } from 'primeng/autocomplete';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { FormDynamicAngularComponent } from './form-dynamic-angular.component';\r\nimport { MessageService } from 'primeng/api';\r\nimport { InputTextareaModule } from 'primeng/inputtextarea';\r\nimport { CheckboxModule } from 'primeng/checkbox';\r\nimport { InputSwitchModule } from 'primeng/inputswitch';\r\nimport { SelectButtonModule } from 'primeng/selectbutton';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MultiSelectModule } from 'primeng/multiselect';\r\nimport { FileUploadModule } from 'primeng/fileupload';\r\nimport { NgxDropzoneModule } from 'ngx-dropzone';\r\nimport { TableModule } from 'primeng/table';\r\nimport { PasswordModule } from 'primeng/password';\r\nimport { InputNumberModule } from 'primeng/inputnumber';\r\nimport { InputMaskModule } from 'primeng/inputmask';\r\n\r\nexport function HttpLoaderFactory(http: HttpClient): TranslateHttpLoader {\r\n  return new TranslateHttpLoader(http);\r\n}\r\n@NgModule({\r\n  declarations: [\r\n    FormDynamicAngularComponent\r\n  ],\r\n  imports: [\r\n    InputMaskModule,\r\n    InputNumberModule,\r\n    PasswordModule,\r\n    ButtonModule,\r\n    TableModule,\r\n    FileUploadModule,\r\n    NgxDropzoneModule,\r\n    MultiSelectModule,\r\n    CommonModule,\r\n    SelectButtonModule,\r\n    InputSwitchModule,\r\n    CheckboxModule,\r\n    InputTextareaModule,\r\n    InputTextModule,\r\n    DividerModule,\r\n    CalendarModule,\r\n    DropdownModule,\r\n    TreeSelectModule,\r\n    RadioButtonModule,\r\n    AutoCompleteModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient]\r\n      },\r\n    })\r\n  ],\r\n  providers: [\r\n    MessageService\r\n  ],\r\n  exports: [\r\n    FormDynamicAngularComponent\r\n  ]\r\n})\r\n\r\nexport class FormDynamicAngularModule { }\r\n","/*\r\n * Public API Surface of form-dynamic-angular\r\n */\r\n\r\nexport * from './lib/form-dynamic-angular.service';\r\nexport * from './lib/form-dynamic-angular.component';\r\nexport * from './lib/form-dynamic-angular.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}