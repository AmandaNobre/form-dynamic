import { Component, Input } from '@angular/core';
import * as moment from 'moment';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "primeng/api";
import * as i3 from "primeng/inputmask";
import * as i4 from "primeng/inputnumber";
import * as i5 from "primeng/password";
import * as i6 from "primeng/button";
import * as i7 from "primeng/table";
import * as i8 from "ngx-dropzone";
import * as i9 from "primeng/multiselect";
import * as i10 from "@angular/common";
import * as i11 from "primeng/selectbutton";
import * as i12 from "primeng/inputswitch";
import * as i13 from "primeng/checkbox";
import * as i14 from "primeng/inputtextarea";
import * as i15 from "primeng/inputtext";
import * as i16 from "primeng/divider";
import * as i17 from "primeng/calendar";
import * as i18 from "primeng/dropdown";
import * as i19 from "primeng/treeselect";
import * as i20 from "primeng/radiobutton";
import * as i21 from "primeng/autocomplete";
import * as i22 from "@angular/forms";
export class FormDynamicAngularComponent {
    constructor(translate, messageService) {
        this.translate = translate;
        this.messageService = messageService;
        this.validateForm = false;
        this.form = [];
        this.files = [];
        this.filesDonwload = [];
        this.filteredAutoComplete = [];
        this.toBase64 = async (file) => {
            return new Promise((resolve, _) => {
                const reader = new FileReader();
                reader.onloadend = () => resolve(reader.result);
                reader.readAsDataURL(file);
            });
        };
    }
    dowloadFIle(event, file) {
        event.stopPropagation();
        // this.attachmentsService.download(file.id).subscribe(data => {
        //   const blob = window.URL.createObjectURL(new Blob([data]));
        //   const anchorEl = document.createElement("a");
        //   anchorEl.href = blob;
        //   anchorEl.setAttribute("download", file.name);
        //   anchorEl.click();
        // })
    }
    onFocusDate(date) {
        this.minDate = moment(date).toDate();
        this.maxDate = moment(date).add(6, 'month').toDate();
    }
    async onSelect(fileName, event) {
        this.filesDonwload.push(...event.addedFiles);
        const newFIles = event.addedFiles;
        let arr = [];
        for (const item of newFIles) {
            let aux = {
                name: item.name,
                contentType: item?.type,
                content: await this.toBase64(item)
            };
            arr.push(aux);
        }
        this.control.get(fileName)?.setValue(arr);
    }
    onRemove(event) {
        this.filesDonwload.splice(this.filesDonwload.indexOf(event), 1);
    }
    filterAutoComplete(event, suggestionsAutoComplete) {
        let filtered = [];
        let query = event.query;
        if (suggestionsAutoComplete) {
            for (let i = 0; i < suggestionsAutoComplete.length; i++) {
                let dados = suggestionsAutoComplete[i];
                if (dados.description.toLowerCase().normalize('NFD').replace(/\p{M}/ug, '').indexOf(query.toLowerCase().normalize('NFD').replace(/\p{M}/ug, '')) != -1) {
                    filtered.push(dados);
                }
            }
            this.filteredAutoComplete = filtered;
        }
    }
    onBlurDate(event) {
        if (event.target.value) {
            if (!moment(event.target.value, "DD/MM/yyyy HH:mm", true).isValid() && !moment(event.target.value, "DD/MM/yyyy", true).isValid()) {
                this.messageService.add({ severity: 'error', summary: this.translate.instant('globals.invalidDate'), detail: this.translate.instant('globals.invalidDateMessage') });
            }
        }
    }
    onChange(change) {
        if (change) {
            change();
        }
    }
}
FormDynamicAngularComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: FormDynamicAngularComponent, deps: [{ token: i1.TranslateService }, { token: i2.MessageService }], target: i0.ɵɵFactoryTarget.Component });
FormDynamicAngularComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: FormDynamicAngularComponent, selector: "form-dynamic-angular", inputs: { title: "title", sigle: "sigle", description: "description", validateForm: "validateForm", form: "form", control: "control", buttonsStandard: "buttonsStandard", buttonsOptional: "buttonsOptional", files: "files" }, ngImport: i0, template: "<div>\r\n    <div *ngIf=\"title\" class=\"div-title\">\r\n        <span translate={{title}}></span>\r\n        <div *ngIf=\"sigle && description\" class=\"d-flex subtitle\">\r\n            <span translate={{sigle}}></span> <span>-</span><span translate={{description}}></span>\r\n        </div>\r\n        <p-divider></p-divider>\r\n    </div>\r\n    <form *ngIf=\"control\" [formGroup]=\"control\" class=\"row row-custom\">\r\n        <div *ngFor=\"let campo of form\" class=\"{{campo.col}} col-sm-12\">\r\n            <label class=\"form-label\" *ngIf=\"campo.label\">{{campo.label}}</label>\r\n            <label class=\"form-label ml-2\" *ngIf=\"campo.secondLabel\">{{campo.secondLabel}}</label>\r\n            <label *ngIf=\"campo.required && campo.label\" class=\"danger-text ml-2\">*</label>\r\n\r\n            <div class=\"mb-3 \">\r\n                <!-- text -->\r\n                <input [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" pInputText placeholder={{campo.placeholder}}\r\n                    *ngIf=\"campo.type == 'text' || campo.type == 'number' \" type={{campo.type}} class=\"form-control\"\r\n                    formControlName={{campo.formControl}} />\r\n\r\n                <!-- select -->\r\n                <p-dropdown [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} styleClass=\"w-100 form-control p-0\"\r\n                    (onChange)=\"onChange(campo.onChange)\" *ngIf=\"campo.type === 'select'\" [options]=\"campo.options\"\r\n                    formControlName={{campo.formControl}} optionLabel=\"description\"></p-dropdown>\r\n\r\n                <!-- currency  -->\r\n                <p-inputNumber *ngIf=\"campo.type === 'currency'\" [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" formControlName={{campo.formControl}} placeholder={{campo.placeholder}}\r\n                    inputStyleClass=\" form-control w-100\" styleClass=\"w-100\" (onKeyDown)=\"onChange(campo.onChange)\"\r\n                    mode=\"currency\" [min]=\"0\" currency=\"BRL\">\r\n                </p-inputNumber>\r\n\r\n                <!-- mask  -->\r\n                <p-inputMask *ngIf=\"campo.type === 'mask'\" [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" formControlName={{campo.formControl}} placeholder={{campo.placeholder}} styleClass=\" form-control\"\r\n                    (onComplete)=\"onChange(campo.onChange)\" mask={{campo.mask}} unmask=\"true\"></p-inputMask>\r\n\r\n                <!-- treeSelect -->\r\n                <p-treeSelect [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} (onNodeSelect)=\"onChange(campo.onChange)\"\r\n                    *ngIf=\"campo.type === 'tree-select'\" containerStyleClass=\"w-100 form-control p-0\"\r\n                    formControlName={{campo.formControl}} [options]=\"campo.treeSelectOptions\" [filter]=\"true\"\r\n                    [filterInputAutoFocus]=\"true\" emptyMessage=\"Nenhum dado encontrado\" [showClear]=\"true\"\r\n                    (onClear)=\"campo.clean()\"></p-treeSelect>\r\n\r\n                <!-- autoComplete -->\r\n                <p-autoComplete [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} styleClass=\"w-100 p-0\" inputStyleClass=\"form-control\"\r\n                    [inputStyle]=\"{'width':'100%'}\" (onSelect)=\" onChange(campo.onChange)\"\r\n                    *ngIf=\"campo.type === 'autocomplete'\" formControlName={{campo.formControl}}\r\n                    [suggestions]=\"filteredAutoComplete\" (completeMethod)=\"filterAutoComplete($event, campo.options)\"\r\n                    [forceSelection]=\"false\" [showEmptyMessage]=\"true\" emptyMessage=\"Nenhum dado encontrado\"\r\n                    dataKey=\"code\" field=\"description\"></p-autoComplete>\r\n\r\n                <!-- date -->\r\n                <div class=\"d-flex-custom\" *ngIf=\"campo.type === 'date' && campo.datePeriod\">\r\n                    <p-calendar [ngClass]=\"{\r\n                        'ng-invalid ng-dirty':\r\n                        validateForm && control.controls[campo.formControl].errors\r\n                      }\" [selectOtherMonths]=\"true\" [minDate]=\"minDateAll\" styleClass=\"w-100 form-control p-0\"\r\n                        (onSelect)=\"onChange(campo.onChange)\" dateFormat=\"dd/mm/yy\" placeholder=\"dd/mm/aaaa\"\r\n                        [showIcon]=\"true\" formControlName={{campo.formControl}}\r\n                        (onBlur)=\"onBlurDate($event)\"></p-calendar>\r\n                    <!-- <span class=\"calendarPeriod\">{{translate.instant('globals.between_dates')}}</span> -->\r\n                    <span class=\"calendarPeriod\">a</span>\r\n                    <p-calendar [ngClass]=\"{\r\n                        'ng-invalid ng-dirty':\r\n                        validateForm && control.controls[campo.formControl].errors\r\n                      }\" [selectOtherMonths]=\"true\" styleClass=\"w-100 form-control p-0\"\r\n                        (onFocus)=\"onFocusDate(control.value['per\u00EDodoIni'])\" (onSelect)=\"onChange(campo.onChange)\"\r\n                        [minDate]=\"minDate\" [maxDate]=\"maxDate\" dateFormat=\"dd/mm/yy\" placeholder=\"dd/mm/aaaa\"\r\n                        [showIcon]=\"true\" formControlName={{campo.formControlSecondary}}\r\n                        (onBlur)=\"onBlurDate($event)\"></p-calendar>\r\n                </div>\r\n                <div *ngIf=\"campo.type === 'date' && !campo.datePeriod\">\r\n                    <p-calendar [ngClass]=\"{\r\n                        'ng-invalid ng-dirty':\r\n                        validateForm && control.controls[campo.formControl].errors\r\n                      }\" (onSelect)=\"onChange(campo.onChange)\" [iconDisplay]=\"'input'\" [selectOtherMonths]=\"true\"\r\n                        [minDate]=\"minDateAll\" styleClass=\"w-100 p-0\" inputStyleClass=\"form-control\"\r\n                        dateFormat=\"dd/mm/yy\" placeholder=\"dd/mm/aaaa\" formControlName={{campo.formControl}}\r\n                        [showIcon]=\"true\" (onBlur)=\"onBlurDate($event)\"></p-calendar>\r\n                </div>\r\n\r\n                <!-- date-time -->\r\n                <div *ngIf=\"campo.type === 'date-time'\">\r\n                    <p-calendar [ngClass]=\"{\r\n                        'ng-invalid ng-dirty':\r\n                        validateForm && control.controls[campo.formControl].errors\r\n                      }\" (onSelect)=\"onChange(campo.onChange)\" [selectOtherMonths]=\"true\"\r\n                        [(minDate)]=\"campo.minDate ?? minDateAll\" [(maxDate)]=\"campo.maxDate\"\r\n                        styleClass=\"w-100 form-control p-0\" dateFormat=\"dd/mm/yy\" placeholder=\"dd/mm/aaaa hh:mm\"\r\n                        formControlName={{campo.formControl}} [showIcon]=\"true\" [showTime]=\"true\"\r\n                        (onBlur)=\"onBlurDate($event)\"></p-calendar>\r\n                </div>\r\n\r\n                <!-- textarea -->\r\n                <textarea [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} pInputTextarea (attr.change)=\"onChange(campo.onChange)\"\r\n                    *ngIf=\"campo.type === 'text-area' \" pInputTextarea formControlName={{campo.formControl}}\r\n                    class=\"form-control\" rows={{campo.rows}}></textarea>\r\n\r\n                <!-- checkbox -->\r\n                <div *ngIf=\"campo.type == 'check-box'\">\r\n                    <p-checkbox [ngClass]=\"{\r\n                        'ng-invalid ng-dirty':\r\n                        validateForm && control.controls[campo.formControl].errors\r\n                      }\" (onChange)=\"onChange(campo.onChange)\" binary=\"true\" formControlName={{campo.formControl}}\r\n                        value={{campo.formControl}} label={{campo.textCheckBox}}></p-checkbox>\r\n                </div>\r\n\r\n                <!-- button -->\r\n                <button pButton *ngIf=\"campo.type == 'button'\" class='{{campo.class}} w-100 mt-3'\r\n                    (click)=\"campo.onCLick()\" icon={{campo.icon}}\r\n                    [label]=\"translate.instant(campo.textButton)\"></button>\r\n\r\n                <!-- upload files -->\r\n                <div *ngIf=\"campo.type === 'upload-files' && !campo.disabled \" ngx-dropzone class=\"drag-image\"\r\n                    [accept]=\"campo.acceptFiles\" (change)=\"onSelect(campo.formControl, $event)\">\r\n                    <ngx-dropzone-label>\r\n                        <div><i class=\"pi pi-cloud-upload\"></i></div>\r\n                        <h6>Clique ou arraste e solte um arquivo para anexar</h6>\r\n                        <span>{{campo.msgAcceptFiles}}</span>\r\n                    </ngx-dropzone-label>\r\n                    <div *ngFor=\"let f of filesDonwload\">\r\n                        <ngx-dropzone-image-preview *ngIf=\"f.type && f.type.includes('image')\" [file]=\"f\"\r\n                            [removable]=\"true\" (removed)=\"onRemove(f)\">\r\n                            <ngx-dropzone-label>{{ f.name }}</ngx-dropzone-label>\r\n                        </ngx-dropzone-image-preview>\r\n                        <ngx-dropzone-preview *ngIf=\"f.type && !f.type.includes('image')\" [file]=\"f\" [removable]=\"true\"\r\n                            (removed)=\"onRemove(f)\">\r\n                            <ngx-dropzone-label>{{ f.name }}</ngx-dropzone-label>\r\n                        </ngx-dropzone-preview>\r\n                        <ngx-dropzone-preview *ngIf=\" f.id\" [file]=\"f\" [removable]=\"true\" (removed)=\"onRemove(f)\">\r\n                            <ngx-dropzone-label>{{ f.name }}</ngx-dropzone-label>\r\n                        </ngx-dropzone-preview>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- upload files disabled -->\r\n                <div *ngIf=\"campo.type === 'upload-files' && campo.disabled \">\r\n                    <p-button (click)=\"op.toggle($event)\" icon=\"pi pi-paperclip\"\r\n                        [label]=\"translate.instant('globals.files')\"></p-button>\r\n\r\n                    <p-overlayPanel #op [style]=\"{'width': '450px'}\" [showCloseIcon]=\"true\">\r\n                        <ng-template pTemplate=\"content\">\r\n                            <p-table *ngIf=\"files.length > 0\" [value]=\"files\" selectionMode=\"single\"\r\n                                [(selection)]=\"selectedProduct\" (onRowSelect)=\"onRowSelect($event, op)\"\r\n                                responsiveLayout=\"scroll\">\r\n                                <ng-template pTemplate=\"header\">\r\n                                    <tr>\r\n                                        <th pSortableColumn=\"name\">{{translate.instant('globals.name')}}<p-sortIcon\r\n                                                field=\"name\"></p-sortIcon></th>\r\n                                    </tr>\r\n                                </ng-template>\r\n                                <ng-template pTemplate=\"body\" let-rowData let-file>\r\n                                    <tr [pSelectableRow]=\"rowData\">\r\n                                        <td>{{file.name}}</td>\r\n                                        <td> <p-button icon=\"pi pi-download\"\r\n                                                (click)='dowloadFIle($event,file)'></p-button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </ng-template>\r\n                            </p-table>\r\n                            <div *ngIf=\"files.length === 0\" class=\"p-10\">\r\n                                <label>{{translate.instant('globals.notFiles')}}</label>\r\n                            </div>\r\n                        </ng-template>\r\n                    </p-overlayPanel>\r\n                </div>\r\n\r\n                <!-- list -->\r\n                <ul *ngIf=\"campo.type === 'list' && campo.options\">\r\n                    <li *ngFor=\"let list of campo.options\">{{list.description}}</li>\r\n                </ul>\r\n\r\n                <!-- multi -->\r\n                <p-multiSelect [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} *ngIf=\"campo.type === 'multi'\" [options]=\"campo.options\"\r\n                    formControlName={{campo.formControl}} styleClass=\"form-control p-0\"\r\n                    optionLabel=\"description\"></p-multiSelect>\r\n\r\n                <!-- radioButton -->\r\n                <div *ngIf=\"campo.type === 'radio-button'\" class=\"d-flex-radio-button form-control border-none\">\r\n                    <div *ngFor=\"let listRadioButton of campo.options\" class=\"field-checkbox\">\r\n                        <p-radioButton [ngClass]=\"{\r\n                            'ng-invalid ng-dirty':\r\n                            validateForm && control.controls[campo.formControl].errors\r\n                          }\" [value]=\"listRadioButton.code\" formControlName={{campo.formControl}}\r\n                            class=\"margin-right-10\" (onClick)=\"onChange(campo.onChange)\"></p-radioButton>\r\n                        <label class=\"margin-right-1\">{{listRadioButton.description}}</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- selectButton -->\r\n                <div class=\"d-flex\" *ngIf=\"campo.type === 'select-button'\">\r\n                    <p-selectButton (onChange)=\"onChange(campo.onChange)\" [options]=\"campo.options\"\r\n                        formControlName={{campo.formControl}} optionValue=\"code\">\r\n                        <ng-template let-item>\r\n                            <span>{{item.description}}</span>\r\n                        </ng-template>\r\n                    </p-selectButton>\r\n                    <!-- <input type=\"text\" pInputText class=\"form-control\" [attr.disabled]=\"campo.disabled\"\r\n                        formControlName={{campo.formControlSecondary}}> -->\r\n                </div>\r\n\r\n                <!-- table -->\r\n                <p-table *ngIf=\"campo.type === 'table'\" [columns]=campo.colsTable styleClass=p-datatable-striped\r\n                    [value]=campo.rowsTable>\r\n                    <ng-template pTemplate=\"header\" let-columns>\r\n                        <tr>\r\n                            <th *ngFor=\"let col of columns\">\r\n                                {{ col.header }}\r\n                            </th>\r\n                        </tr>\r\n                    </ng-template>\r\n                    <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\r\n                        <tr>\r\n                            <td *ngFor=\"let col of columns\">\r\n                                <div *ngIf=\"col.field !== 'button'\">\r\n                                    {{ rowData[col.field] }}\r\n                                </div>\r\n                                <div *ngIf=\"col.field == 'button'\">\r\n                                    <p-button styleClass={{rowData[col.field].styleClass}}\r\n                                        label={{rowData[col.field].label}} (click)=\"rowData[col.field].onCLick(rowData)\"\r\n                                        icon={{rowData[col.field].icon}}></p-button>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    </ng-template>\r\n                </p-table>\r\n\r\n                <!-- inputSwitch -->\r\n                <div class=\"d-flex\" *ngIf=\"campo.type === 'switch'\">\r\n                    <p-inputSwitch formControlName={{campo.formControl}} class=\"mr-10\"\r\n                        (onChange)=\"onChange(campo.onChange)\"></p-inputSwitch>\r\n                    <p translate={{campo.label}}></p>\r\n                </div>\r\n\r\n                <!-- password -->\r\n                <p-password [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} *ngIf=\"campo.type === 'password'\" [feedback]=\"false\"\r\n                    formControlName={{campo.formControl}} (onChange)=\"onChange(campo.onChange)\" styleClass=\"w-100\"\r\n                    inputStyleClass=\"form-control\" [toggleMask]=\"true\"></p-password>\r\n\r\n                <!-- valida\u00E7\u00E3o de campo -->\r\n                <div class=\"h-10\">\r\n                    <small class=\"danger-text\"\r\n                        *ngIf=\"validateForm && control.controls[campo.formControl] && control.controls[campo.formControl].errors?.['required']\">\r\n                        Campo obrigat\u00F3rio\r\n                    </small>\r\n                    <small class=\"danger-text\"\r\n                        *ngIf=\"validateForm && control.controls[campo.formControl] && control.controls[campo.formControl].errors?.['email']\">\r\n                        Email inv\u00E1lido\r\n                    </small>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <p-divider\r\n            *ngIf=\"(buttonsStandard && buttonsStandard.length > 0) || (buttonsOptional && buttonsOptional.length > 0)\"></p-divider>\r\n\r\n        <div class=\"buttons-form\">\r\n            <div *ngFor=\"let button of buttonsStandard\">\r\n                <p-button *ngIf=\"button.type === 'clean'\" styleClass=\"p-button-warning {{button.styleClass}}\"\r\n                    label=\"Limpar\" (click)=\"button.onCLick()\" icon=\"pi pi-times\"></p-button>\r\n                <p-button *ngIf=\"button.type === 'filter'\" styleClass=\"{{button.styleClass}}\" label=\"Filtrar\"\r\n                    (click)=\"button.onCLick()\" icon=\"pi pi-search\"></p-button>\r\n                <p-button *ngIf=\"button.type === 'save'\" styleClass=\"p-button-success {{button.styleClass}}\"\r\n                    label=\"Salvar\" (click)=\"button.onCLick()\" icon=\"pi pi-save\"></p-button>\r\n                <p-button *ngIf=\"button.type === 'cancel'\" styleClass=\"p-button-danger {{button.styleClass}}\"\r\n                    label=\"Cancelar\" (click)=\"button.onCLick()\" icon=\"pi pi-times\"></p-button>\r\n            </div>\r\n            <div *ngFor=\"let button of buttonsOptional\">\r\n                <p-button styleClass={{button.styleClass}} label={{button.label}} (click)=\" button.onCLick()\"\r\n                    icon={{button.icon}}></p-button>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>", styles: [".page{border-radius:11px;padding:38px;margin-bottom:35px}.border-none{border:none}.p-0{padding:0!important}.h-10{height:10px}.row-custom{align-items:end}.div-title span{font-size:20px;font-weight:500}.buttons-form{display:flex;gap:10px;justify-content:flex-end}.danger-text{color:#f18282}.drag-image{border:1px dashed #000;height:auto;width:100%;border-radius:10px;font-weight:400;display:flex;align-items:center;flex-direction:column;top:20px;max-height:250px;color:#000;padding:20px}.drag-image h6{font-size:20px}.drag-image span{font-size:14px}.drag-image i{font-size:3rem}.cardList td{padding-right:20px}.subtitle span{font-size:14px;margin-right:5px}.subtitle{align-items:baseline}.d-flex-custom{display:flex;justify-content:space-between;align-items:center}@media (max-width: 1200px){.d-flex-custom{display:block!important}}.margin-right-10{margin-right:10px}.margin-right-1{margin-right:1px}.d-flex-radio-button{display:flex;align-items:center;gap:10px}.d-flex-radio-button label,.label-check-box{margin:0}\n"], dependencies: [{ kind: "component", type: i3.InputMask, selector: "p-inputMask", inputs: ["type", "slotChar", "autoClear", "showClear", "style", "inputId", "styleClass", "placeholder", "size", "maxlength", "tabindex", "title", "ariaLabel", "ariaRequired", "disabled", "readonly", "unmask", "name", "required", "characterPattern", "autoFocus", "autocomplete", "keepBuffer", "mask"], outputs: ["onComplete", "onFocus", "onBlur", "onInput", "onKeydown", "onClear"] }, { kind: "directive", type: i2.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { kind: "component", type: i4.InputNumber, selector: "p-inputNumber", inputs: ["showButtons", "format", "buttonLayout", "inputId", "styleClass", "style", "placeholder", "size", "maxlength", "tabindex", "title", "ariaLabel", "ariaRequired", "name", "required", "autocomplete", "min", "max", "incrementButtonClass", "decrementButtonClass", "incrementButtonIcon", "decrementButtonIcon", "readonly", "step", "allowEmpty", "locale", "localeMatcher", "mode", "currency", "currencyDisplay", "useGrouping", "minFractionDigits", "maxFractionDigits", "prefix", "suffix", "inputStyle", "inputStyleClass", "showClear", "disabled"], outputs: ["onInput", "onFocus", "onBlur", "onKeyDown", "onClear"] }, { kind: "component", type: i5.Password, selector: "p-password", inputs: ["ariaLabel", "ariaLabelledBy", "label", "disabled", "promptLabel", "mediumRegex", "strongRegex", "weakLabel", "mediumLabel", "maxLength", "strongLabel", "inputId", "feedback", "appendTo", "toggleMask", "inputStyleClass", "panelStyle", "panelStyleClass", "styleClass", "style", "inputStyle", "showTransitionOptions", "hideTransitionOptions", "placeholder", "showClear"], outputs: ["onFocus", "onBlur", "onClear"] }, { kind: "directive", type: i6.ButtonDirective, selector: "[pButton]", inputs: ["iconPos", "loadingIcon", "label", "icon", "loading"] }, { kind: "component", type: i6.Button, selector: "p-button", inputs: ["type", "iconPos", "icon", "badge", "label", "disabled", "loading", "loadingIcon", "style", "styleClass", "badgeClass", "ariaLabel"], outputs: ["onClick", "onFocus", "onBlur"] }, { kind: "component", type: i7.Table, selector: "p-table", inputs: ["frozenColumns", "frozenValue", "style", "styleClass", "tableStyle", "tableStyleClass", "paginator", "pageLinks", "rowsPerPageOptions", "alwaysShowPaginator", "paginatorPosition", "paginatorDropdownAppendTo", "paginatorDropdownScrollHeight", "currentPageReportTemplate", "showCurrentPageReport", "showJumpToPageDropdown", "showJumpToPageInput", "showFirstLastIcon", "showPageLinks", "defaultSortOrder", "sortMode", "resetPageOnSort", "selectionMode", "selectionPageOnly", "contextMenuSelection", "contextMenuSelectionMode", "dataKey", "metaKeySelection", "rowSelectable", "rowTrackBy", "lazy", "lazyLoadOnInit", "compareSelectionBy", "csvSeparator", "exportFilename", "filters", "globalFilterFields", "filterDelay", "filterLocale", "expandedRowKeys", "editingRowKeys", "rowExpandMode", "scrollable", "scrollDirection", "rowGroupMode", "scrollHeight", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "virtualScrollDelay", "frozenWidth", "responsive", "contextMenu", "resizableColumns", "columnResizeMode", "reorderableColumns", "loading", "loadingIcon", "showLoader", "rowHover", "customSort", "showInitialSortBadge", "autoLayout", "exportFunction", "exportHeader", "stateKey", "stateStorage", "editMode", "groupRowsBy", "groupRowsByOrder", "responsiveLayout", "breakpoint", "virtualRowHeight", "value", "columns", "first", "rows", "totalRecords", "sortField", "sortOrder", "multiSortMeta", "selection", "selectAll"], outputs: ["selectAllChange", "selectionChange", "contextMenuSelectionChange", "onRowSelect", "onRowUnselect", "onPage", "onSort", "onFilter", "onLazyLoad", "onRowExpand", "onRowCollapse", "onContextMenuSelect", "onColResize", "onColReorder", "onRowReorder", "onEditInit", "onEditComplete", "onEditCancel", "onHeaderCheckboxToggle", "sortFunction", "firstChange", "rowsChange", "onStateSave", "onStateRestore"] }, { kind: "directive", type: i7.SortableColumn, selector: "[pSortableColumn]", inputs: ["pSortableColumn", "pSortableColumnDisabled"] }, { kind: "directive", type: i7.SelectableRow, selector: "[pSelectableRow]", inputs: ["pSelectableRow", "pSelectableRowIndex", "pSelectableRowDisabled"] }, { kind: "component", type: i7.SortIcon, selector: "p-sortIcon", inputs: ["field"] }, { kind: "component", type: i8.NgxDropzoneComponent, selector: "ngx-dropzone, [ngx-dropzone]", inputs: ["accept", "disabled", "multiple", "maxFileSize", "expandable", "disableClick", "processDirectoryDrop", "id", "aria-label", "aria-labelledby", "aria-describedby"], outputs: ["change"] }, { kind: "directive", type: i8.NgxDropzoneLabelDirective, selector: "ngx-dropzone-label" }, { kind: "component", type: i8.NgxDropzonePreviewComponent, selector: "ngx-dropzone-preview", inputs: ["file", "removable"], outputs: ["removed"] }, { kind: "component", type: i8.NgxDropzoneImagePreviewComponent, selector: "ngx-dropzone-image-preview", inputs: ["file"] }, { kind: "component", type: i9.MultiSelect, selector: "p-multiSelect", inputs: ["style", "styleClass", "panelStyle", "panelStyleClass", "inputId", "disabled", "readonly", "group", "filter", "filterPlaceHolder", "filterLocale", "overlayVisible", "tabindex", "appendTo", "dataKey", "name", "label", "ariaLabelledBy", "displaySelectedLabel", "maxSelectedLabels", "selectionLimit", "selectedItemsLabel", "showToggleAll", "emptyFilterMessage", "emptyMessage", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "showHeader", "filterBy", "scrollHeight", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "filterMatchMode", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "display", "autocomplete", "showClear", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "defaultLabel", "placeholder", "options", "filterValue", "itemSize"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onClear", "onPanelShow", "onPanelHide", "onLazyLoad", "onRemove"] }, { kind: "directive", type: i10.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i10.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i11.SelectButton, selector: "p-selectButton", inputs: ["options", "optionLabel", "optionValue", "optionDisabled", "tabindex", "multiple", "style", "styleClass", "ariaLabelledBy", "disabled", "dataKey"], outputs: ["onOptionClick", "onChange"] }, { kind: "component", type: i12.InputSwitch, selector: "p-inputSwitch", inputs: ["style", "styleClass", "tabindex", "inputId", "name", "disabled", "readonly", "trueValue", "falseValue", "ariaLabel", "ariaLabelledBy"], outputs: ["onChange"] }, { kind: "component", type: i13.Checkbox, selector: "p-checkbox", inputs: ["value", "name", "disabled", "binary", "label", "ariaLabelledBy", "ariaLabel", "tabindex", "inputId", "style", "styleClass", "labelStyleClass", "formControl", "checkboxIcon", "readonly", "required", "trueValue", "falseValue"], outputs: ["onChange"] }, { kind: "directive", type: i14.InputTextarea, selector: "[pInputTextarea]", inputs: ["autoResize"], outputs: ["onResize"] }, { kind: "directive", type: i15.InputText, selector: "[pInputText]" }, { kind: "component", type: i16.Divider, selector: "p-divider", inputs: ["styleClass", "style", "layout", "type", "align"] }, { kind: "component", type: i17.Calendar, selector: "p-calendar", inputs: ["style", "styleClass", "inputStyle", "inputId", "name", "inputStyleClass", "placeholder", "ariaLabelledBy", "iconAriaLabel", "disabled", "dateFormat", "multipleSeparator", "rangeSeparator", "inline", "showOtherMonths", "selectOtherMonths", "showIcon", "icon", "appendTo", "readonlyInput", "shortYearCutoff", "monthNavigator", "yearNavigator", "hourFormat", "timeOnly", "stepHour", "stepMinute", "stepSecond", "showSeconds", "required", "showOnFocus", "showWeek", "showClear", "dataType", "selectionMode", "maxDateCount", "showButtonBar", "todayButtonStyleClass", "clearButtonStyleClass", "autoZIndex", "baseZIndex", "panelStyleClass", "panelStyle", "keepInvalid", "hideOnDateTimeSelect", "touchUI", "timeSeparator", "focusTrap", "showTransitionOptions", "hideTransitionOptions", "tabindex", "view", "defaultDate", "minDate", "maxDate", "disabledDates", "disabledDays", "yearRange", "showTime", "responsiveOptions", "numberOfMonths", "firstDayOfWeek", "locale"], outputs: ["onFocus", "onBlur", "onClose", "onSelect", "onClear", "onInput", "onTodayClick", "onClearClick", "onMonthChange", "onYearChange", "onClickOutside", "onShow"] }, { kind: "component", type: i18.Dropdown, selector: "p-dropdown", inputs: ["scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "filterPlaceholder", "filterLocale", "inputId", "selectId", "dataKey", "filterBy", "autofocus", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "overlayDirection", "disabled", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "options", "filterValue"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear", "onLazyLoad"] }, { kind: "component", type: i19.TreeSelect, selector: "p-treeSelect", inputs: ["type", "inputId", "scrollHeight", "disabled", "metaKeySelection", "display", "selectionMode", "tabindex", "ariaLabelledBy", "placeholder", "panelClass", "panelStyle", "panelStyleClass", "containerStyle", "containerStyleClass", "labelStyle", "labelStyleClass", "overlayOptions", "emptyMessage", "appendTo", "filter", "filterBy", "filterMode", "filterPlaceholder", "filterLocale", "filterInputAutoFocus", "propagateSelectionDown", "propagateSelectionUp", "showClear", "resetFilterOnHide", "options", "showTransitionOptions", "hideTransitionOptions"], outputs: ["onNodeExpand", "onNodeCollapse", "onShow", "onHide", "onClear", "onFilter", "onNodeUnselect", "onNodeSelect"] }, { kind: "component", type: i20.RadioButton, selector: "p-radioButton", inputs: ["value", "formControlName", "name", "disabled", "label", "tabindex", "inputId", "ariaLabelledBy", "ariaLabel", "style", "styleClass", "labelStyleClass"], outputs: ["onClick", "onFocus", "onBlur"] }, { kind: "component", type: i21.AutoComplete, selector: "p-autoComplete", inputs: ["minLength", "delay", "style", "panelStyle", "styleClass", "panelStyleClass", "inputStyle", "inputId", "inputStyleClass", "placeholder", "readonly", "disabled", "scrollHeight", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "maxlength", "name", "required", "size", "appendTo", "autoHighlight", "forceSelection", "type", "autoZIndex", "baseZIndex", "ariaLabel", "dropdownAriaLabel", "ariaLabelledBy", "dropdownIcon", "unique", "group", "completeOnFocus", "showClear", "field", "dropdown", "showEmptyMessage", "dropdownMode", "multiple", "tabindex", "dataKey", "emptyMessage", "showTransitionOptions", "hideTransitionOptions", "autofocus", "autocomplete", "optionGroupChildren", "optionGroupLabel", "overlayOptions", "itemSize", "suggestions"], outputs: ["completeMethod", "onSelect", "onUnselect", "onFocus", "onBlur", "onDropdownClick", "onClear", "onKeyUp", "onShow", "onHide", "onLazyLoad"] }, { kind: "directive", type: i22.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i22.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i22.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i22.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i22.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i22.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i1.TranslateDirective, selector: "[translate],[ngx-translate]", inputs: ["translate", "translateParams"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: FormDynamicAngularComponent, decorators: [{
            type: Component,
            args: [{ selector: 'form-dynamic-angular', template: "<div>\r\n    <div *ngIf=\"title\" class=\"div-title\">\r\n        <span translate={{title}}></span>\r\n        <div *ngIf=\"sigle && description\" class=\"d-flex subtitle\">\r\n            <span translate={{sigle}}></span> <span>-</span><span translate={{description}}></span>\r\n        </div>\r\n        <p-divider></p-divider>\r\n    </div>\r\n    <form *ngIf=\"control\" [formGroup]=\"control\" class=\"row row-custom\">\r\n        <div *ngFor=\"let campo of form\" class=\"{{campo.col}} col-sm-12\">\r\n            <label class=\"form-label\" *ngIf=\"campo.label\">{{campo.label}}</label>\r\n            <label class=\"form-label ml-2\" *ngIf=\"campo.secondLabel\">{{campo.secondLabel}}</label>\r\n            <label *ngIf=\"campo.required && campo.label\" class=\"danger-text ml-2\">*</label>\r\n\r\n            <div class=\"mb-3 \">\r\n                <!-- text -->\r\n                <input [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" pInputText placeholder={{campo.placeholder}}\r\n                    *ngIf=\"campo.type == 'text' || campo.type == 'number' \" type={{campo.type}} class=\"form-control\"\r\n                    formControlName={{campo.formControl}} />\r\n\r\n                <!-- select -->\r\n                <p-dropdown [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} styleClass=\"w-100 form-control p-0\"\r\n                    (onChange)=\"onChange(campo.onChange)\" *ngIf=\"campo.type === 'select'\" [options]=\"campo.options\"\r\n                    formControlName={{campo.formControl}} optionLabel=\"description\"></p-dropdown>\r\n\r\n                <!-- currency  -->\r\n                <p-inputNumber *ngIf=\"campo.type === 'currency'\" [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" formControlName={{campo.formControl}} placeholder={{campo.placeholder}}\r\n                    inputStyleClass=\" form-control w-100\" styleClass=\"w-100\" (onKeyDown)=\"onChange(campo.onChange)\"\r\n                    mode=\"currency\" [min]=\"0\" currency=\"BRL\">\r\n                </p-inputNumber>\r\n\r\n                <!-- mask  -->\r\n                <p-inputMask *ngIf=\"campo.type === 'mask'\" [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" formControlName={{campo.formControl}} placeholder={{campo.placeholder}} styleClass=\" form-control\"\r\n                    (onComplete)=\"onChange(campo.onChange)\" mask={{campo.mask}} unmask=\"true\"></p-inputMask>\r\n\r\n                <!-- treeSelect -->\r\n                <p-treeSelect [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} (onNodeSelect)=\"onChange(campo.onChange)\"\r\n                    *ngIf=\"campo.type === 'tree-select'\" containerStyleClass=\"w-100 form-control p-0\"\r\n                    formControlName={{campo.formControl}} [options]=\"campo.treeSelectOptions\" [filter]=\"true\"\r\n                    [filterInputAutoFocus]=\"true\" emptyMessage=\"Nenhum dado encontrado\" [showClear]=\"true\"\r\n                    (onClear)=\"campo.clean()\"></p-treeSelect>\r\n\r\n                <!-- autoComplete -->\r\n                <p-autoComplete [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} styleClass=\"w-100 p-0\" inputStyleClass=\"form-control\"\r\n                    [inputStyle]=\"{'width':'100%'}\" (onSelect)=\" onChange(campo.onChange)\"\r\n                    *ngIf=\"campo.type === 'autocomplete'\" formControlName={{campo.formControl}}\r\n                    [suggestions]=\"filteredAutoComplete\" (completeMethod)=\"filterAutoComplete($event, campo.options)\"\r\n                    [forceSelection]=\"false\" [showEmptyMessage]=\"true\" emptyMessage=\"Nenhum dado encontrado\"\r\n                    dataKey=\"code\" field=\"description\"></p-autoComplete>\r\n\r\n                <!-- date -->\r\n                <div class=\"d-flex-custom\" *ngIf=\"campo.type === 'date' && campo.datePeriod\">\r\n                    <p-calendar [ngClass]=\"{\r\n                        'ng-invalid ng-dirty':\r\n                        validateForm && control.controls[campo.formControl].errors\r\n                      }\" [selectOtherMonths]=\"true\" [minDate]=\"minDateAll\" styleClass=\"w-100 form-control p-0\"\r\n                        (onSelect)=\"onChange(campo.onChange)\" dateFormat=\"dd/mm/yy\" placeholder=\"dd/mm/aaaa\"\r\n                        [showIcon]=\"true\" formControlName={{campo.formControl}}\r\n                        (onBlur)=\"onBlurDate($event)\"></p-calendar>\r\n                    <!-- <span class=\"calendarPeriod\">{{translate.instant('globals.between_dates')}}</span> -->\r\n                    <span class=\"calendarPeriod\">a</span>\r\n                    <p-calendar [ngClass]=\"{\r\n                        'ng-invalid ng-dirty':\r\n                        validateForm && control.controls[campo.formControl].errors\r\n                      }\" [selectOtherMonths]=\"true\" styleClass=\"w-100 form-control p-0\"\r\n                        (onFocus)=\"onFocusDate(control.value['per\u00EDodoIni'])\" (onSelect)=\"onChange(campo.onChange)\"\r\n                        [minDate]=\"minDate\" [maxDate]=\"maxDate\" dateFormat=\"dd/mm/yy\" placeholder=\"dd/mm/aaaa\"\r\n                        [showIcon]=\"true\" formControlName={{campo.formControlSecondary}}\r\n                        (onBlur)=\"onBlurDate($event)\"></p-calendar>\r\n                </div>\r\n                <div *ngIf=\"campo.type === 'date' && !campo.datePeriod\">\r\n                    <p-calendar [ngClass]=\"{\r\n                        'ng-invalid ng-dirty':\r\n                        validateForm && control.controls[campo.formControl].errors\r\n                      }\" (onSelect)=\"onChange(campo.onChange)\" [iconDisplay]=\"'input'\" [selectOtherMonths]=\"true\"\r\n                        [minDate]=\"minDateAll\" styleClass=\"w-100 p-0\" inputStyleClass=\"form-control\"\r\n                        dateFormat=\"dd/mm/yy\" placeholder=\"dd/mm/aaaa\" formControlName={{campo.formControl}}\r\n                        [showIcon]=\"true\" (onBlur)=\"onBlurDate($event)\"></p-calendar>\r\n                </div>\r\n\r\n                <!-- date-time -->\r\n                <div *ngIf=\"campo.type === 'date-time'\">\r\n                    <p-calendar [ngClass]=\"{\r\n                        'ng-invalid ng-dirty':\r\n                        validateForm && control.controls[campo.formControl].errors\r\n                      }\" (onSelect)=\"onChange(campo.onChange)\" [selectOtherMonths]=\"true\"\r\n                        [(minDate)]=\"campo.minDate ?? minDateAll\" [(maxDate)]=\"campo.maxDate\"\r\n                        styleClass=\"w-100 form-control p-0\" dateFormat=\"dd/mm/yy\" placeholder=\"dd/mm/aaaa hh:mm\"\r\n                        formControlName={{campo.formControl}} [showIcon]=\"true\" [showTime]=\"true\"\r\n                        (onBlur)=\"onBlurDate($event)\"></p-calendar>\r\n                </div>\r\n\r\n                <!-- textarea -->\r\n                <textarea [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} pInputTextarea (attr.change)=\"onChange(campo.onChange)\"\r\n                    *ngIf=\"campo.type === 'text-area' \" pInputTextarea formControlName={{campo.formControl}}\r\n                    class=\"form-control\" rows={{campo.rows}}></textarea>\r\n\r\n                <!-- checkbox -->\r\n                <div *ngIf=\"campo.type == 'check-box'\">\r\n                    <p-checkbox [ngClass]=\"{\r\n                        'ng-invalid ng-dirty':\r\n                        validateForm && control.controls[campo.formControl].errors\r\n                      }\" (onChange)=\"onChange(campo.onChange)\" binary=\"true\" formControlName={{campo.formControl}}\r\n                        value={{campo.formControl}} label={{campo.textCheckBox}}></p-checkbox>\r\n                </div>\r\n\r\n                <!-- button -->\r\n                <button pButton *ngIf=\"campo.type == 'button'\" class='{{campo.class}} w-100 mt-3'\r\n                    (click)=\"campo.onCLick()\" icon={{campo.icon}}\r\n                    [label]=\"translate.instant(campo.textButton)\"></button>\r\n\r\n                <!-- upload files -->\r\n                <div *ngIf=\"campo.type === 'upload-files' && !campo.disabled \" ngx-dropzone class=\"drag-image\"\r\n                    [accept]=\"campo.acceptFiles\" (change)=\"onSelect(campo.formControl, $event)\">\r\n                    <ngx-dropzone-label>\r\n                        <div><i class=\"pi pi-cloud-upload\"></i></div>\r\n                        <h6>Clique ou arraste e solte um arquivo para anexar</h6>\r\n                        <span>{{campo.msgAcceptFiles}}</span>\r\n                    </ngx-dropzone-label>\r\n                    <div *ngFor=\"let f of filesDonwload\">\r\n                        <ngx-dropzone-image-preview *ngIf=\"f.type && f.type.includes('image')\" [file]=\"f\"\r\n                            [removable]=\"true\" (removed)=\"onRemove(f)\">\r\n                            <ngx-dropzone-label>{{ f.name }}</ngx-dropzone-label>\r\n                        </ngx-dropzone-image-preview>\r\n                        <ngx-dropzone-preview *ngIf=\"f.type && !f.type.includes('image')\" [file]=\"f\" [removable]=\"true\"\r\n                            (removed)=\"onRemove(f)\">\r\n                            <ngx-dropzone-label>{{ f.name }}</ngx-dropzone-label>\r\n                        </ngx-dropzone-preview>\r\n                        <ngx-dropzone-preview *ngIf=\" f.id\" [file]=\"f\" [removable]=\"true\" (removed)=\"onRemove(f)\">\r\n                            <ngx-dropzone-label>{{ f.name }}</ngx-dropzone-label>\r\n                        </ngx-dropzone-preview>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- upload files disabled -->\r\n                <div *ngIf=\"campo.type === 'upload-files' && campo.disabled \">\r\n                    <p-button (click)=\"op.toggle($event)\" icon=\"pi pi-paperclip\"\r\n                        [label]=\"translate.instant('globals.files')\"></p-button>\r\n\r\n                    <p-overlayPanel #op [style]=\"{'width': '450px'}\" [showCloseIcon]=\"true\">\r\n                        <ng-template pTemplate=\"content\">\r\n                            <p-table *ngIf=\"files.length > 0\" [value]=\"files\" selectionMode=\"single\"\r\n                                [(selection)]=\"selectedProduct\" (onRowSelect)=\"onRowSelect($event, op)\"\r\n                                responsiveLayout=\"scroll\">\r\n                                <ng-template pTemplate=\"header\">\r\n                                    <tr>\r\n                                        <th pSortableColumn=\"name\">{{translate.instant('globals.name')}}<p-sortIcon\r\n                                                field=\"name\"></p-sortIcon></th>\r\n                                    </tr>\r\n                                </ng-template>\r\n                                <ng-template pTemplate=\"body\" let-rowData let-file>\r\n                                    <tr [pSelectableRow]=\"rowData\">\r\n                                        <td>{{file.name}}</td>\r\n                                        <td> <p-button icon=\"pi pi-download\"\r\n                                                (click)='dowloadFIle($event,file)'></p-button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </ng-template>\r\n                            </p-table>\r\n                            <div *ngIf=\"files.length === 0\" class=\"p-10\">\r\n                                <label>{{translate.instant('globals.notFiles')}}</label>\r\n                            </div>\r\n                        </ng-template>\r\n                    </p-overlayPanel>\r\n                </div>\r\n\r\n                <!-- list -->\r\n                <ul *ngIf=\"campo.type === 'list' && campo.options\">\r\n                    <li *ngFor=\"let list of campo.options\">{{list.description}}</li>\r\n                </ul>\r\n\r\n                <!-- multi -->\r\n                <p-multiSelect [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} *ngIf=\"campo.type === 'multi'\" [options]=\"campo.options\"\r\n                    formControlName={{campo.formControl}} styleClass=\"form-control p-0\"\r\n                    optionLabel=\"description\"></p-multiSelect>\r\n\r\n                <!-- radioButton -->\r\n                <div *ngIf=\"campo.type === 'radio-button'\" class=\"d-flex-radio-button form-control border-none\">\r\n                    <div *ngFor=\"let listRadioButton of campo.options\" class=\"field-checkbox\">\r\n                        <p-radioButton [ngClass]=\"{\r\n                            'ng-invalid ng-dirty':\r\n                            validateForm && control.controls[campo.formControl].errors\r\n                          }\" [value]=\"listRadioButton.code\" formControlName={{campo.formControl}}\r\n                            class=\"margin-right-10\" (onClick)=\"onChange(campo.onChange)\"></p-radioButton>\r\n                        <label class=\"margin-right-1\">{{listRadioButton.description}}</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- selectButton -->\r\n                <div class=\"d-flex\" *ngIf=\"campo.type === 'select-button'\">\r\n                    <p-selectButton (onChange)=\"onChange(campo.onChange)\" [options]=\"campo.options\"\r\n                        formControlName={{campo.formControl}} optionValue=\"code\">\r\n                        <ng-template let-item>\r\n                            <span>{{item.description}}</span>\r\n                        </ng-template>\r\n                    </p-selectButton>\r\n                    <!-- <input type=\"text\" pInputText class=\"form-control\" [attr.disabled]=\"campo.disabled\"\r\n                        formControlName={{campo.formControlSecondary}}> -->\r\n                </div>\r\n\r\n                <!-- table -->\r\n                <p-table *ngIf=\"campo.type === 'table'\" [columns]=campo.colsTable styleClass=p-datatable-striped\r\n                    [value]=campo.rowsTable>\r\n                    <ng-template pTemplate=\"header\" let-columns>\r\n                        <tr>\r\n                            <th *ngFor=\"let col of columns\">\r\n                                {{ col.header }}\r\n                            </th>\r\n                        </tr>\r\n                    </ng-template>\r\n                    <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\r\n                        <tr>\r\n                            <td *ngFor=\"let col of columns\">\r\n                                <div *ngIf=\"col.field !== 'button'\">\r\n                                    {{ rowData[col.field] }}\r\n                                </div>\r\n                                <div *ngIf=\"col.field == 'button'\">\r\n                                    <p-button styleClass={{rowData[col.field].styleClass}}\r\n                                        label={{rowData[col.field].label}} (click)=\"rowData[col.field].onCLick(rowData)\"\r\n                                        icon={{rowData[col.field].icon}}></p-button>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    </ng-template>\r\n                </p-table>\r\n\r\n                <!-- inputSwitch -->\r\n                <div class=\"d-flex\" *ngIf=\"campo.type === 'switch'\">\r\n                    <p-inputSwitch formControlName={{campo.formControl}} class=\"mr-10\"\r\n                        (onChange)=\"onChange(campo.onChange)\"></p-inputSwitch>\r\n                    <p translate={{campo.label}}></p>\r\n                </div>\r\n\r\n                <!-- password -->\r\n                <p-password [ngClass]=\"{\r\n                    'ng-invalid ng-dirty':\r\n                    validateForm && control.controls[campo.formControl].errors\r\n                  }\" placeholder={{campo.placeholder}} *ngIf=\"campo.type === 'password'\" [feedback]=\"false\"\r\n                    formControlName={{campo.formControl}} (onChange)=\"onChange(campo.onChange)\" styleClass=\"w-100\"\r\n                    inputStyleClass=\"form-control\" [toggleMask]=\"true\"></p-password>\r\n\r\n                <!-- valida\u00E7\u00E3o de campo -->\r\n                <div class=\"h-10\">\r\n                    <small class=\"danger-text\"\r\n                        *ngIf=\"validateForm && control.controls[campo.formControl] && control.controls[campo.formControl].errors?.['required']\">\r\n                        Campo obrigat\u00F3rio\r\n                    </small>\r\n                    <small class=\"danger-text\"\r\n                        *ngIf=\"validateForm && control.controls[campo.formControl] && control.controls[campo.formControl].errors?.['email']\">\r\n                        Email inv\u00E1lido\r\n                    </small>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <p-divider\r\n            *ngIf=\"(buttonsStandard && buttonsStandard.length > 0) || (buttonsOptional && buttonsOptional.length > 0)\"></p-divider>\r\n\r\n        <div class=\"buttons-form\">\r\n            <div *ngFor=\"let button of buttonsStandard\">\r\n                <p-button *ngIf=\"button.type === 'clean'\" styleClass=\"p-button-warning {{button.styleClass}}\"\r\n                    label=\"Limpar\" (click)=\"button.onCLick()\" icon=\"pi pi-times\"></p-button>\r\n                <p-button *ngIf=\"button.type === 'filter'\" styleClass=\"{{button.styleClass}}\" label=\"Filtrar\"\r\n                    (click)=\"button.onCLick()\" icon=\"pi pi-search\"></p-button>\r\n                <p-button *ngIf=\"button.type === 'save'\" styleClass=\"p-button-success {{button.styleClass}}\"\r\n                    label=\"Salvar\" (click)=\"button.onCLick()\" icon=\"pi pi-save\"></p-button>\r\n                <p-button *ngIf=\"button.type === 'cancel'\" styleClass=\"p-button-danger {{button.styleClass}}\"\r\n                    label=\"Cancelar\" (click)=\"button.onCLick()\" icon=\"pi pi-times\"></p-button>\r\n            </div>\r\n            <div *ngFor=\"let button of buttonsOptional\">\r\n                <p-button styleClass={{button.styleClass}} label={{button.label}} (click)=\" button.onCLick()\"\r\n                    icon={{button.icon}}></p-button>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>", styles: [".page{border-radius:11px;padding:38px;margin-bottom:35px}.border-none{border:none}.p-0{padding:0!important}.h-10{height:10px}.row-custom{align-items:end}.div-title span{font-size:20px;font-weight:500}.buttons-form{display:flex;gap:10px;justify-content:flex-end}.danger-text{color:#f18282}.drag-image{border:1px dashed #000;height:auto;width:100%;border-radius:10px;font-weight:400;display:flex;align-items:center;flex-direction:column;top:20px;max-height:250px;color:#000;padding:20px}.drag-image h6{font-size:20px}.drag-image span{font-size:14px}.drag-image i{font-size:3rem}.cardList td{padding-right:20px}.subtitle span{font-size:14px;margin-right:5px}.subtitle{align-items:baseline}.d-flex-custom{display:flex;justify-content:space-between;align-items:center}@media (max-width: 1200px){.d-flex-custom{display:block!important}}.margin-right-10{margin-right:10px}.margin-right-1{margin-right:1px}.d-flex-radio-button{display:flex;align-items:center;gap:10px}.d-flex-radio-button label,.label-check-box{margin:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }, { type: i2.MessageService }]; }, propDecorators: { title: [{
                type: Input
            }], sigle: [{
                type: Input
            }], description: [{
                type: Input
            }], validateForm: [{
                type: Input
            }], form: [{
                type: Input
            }], control: [{
                type: Input
            }], buttonsStandard: [{
                type: Input
            }], buttonsOptional: [{
                type: Input
            }], files: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,